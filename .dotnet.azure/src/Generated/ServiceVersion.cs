// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.OpenAI
{
    /// <summary> Known service API versions for Azure OpenAI. </summary>
    public readonly partial struct ServiceVersion : IEquatable<ServiceVersion>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ServiceVersion"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ServiceVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string V20240401PreviewValue = "2024-04-01-preview";
        private const string V20240501PreviewValue = "2024-05-01-preview";
        private const string V20240601Value = "2024-06-01";
        private const string V20240701PreviewValue = "2024-07-01-preview";
        private const string V20240801PreviewValue = "2024-08-01-preview";

        /// <summary> The 2024-04-01-preview service API version label. </summary>
        public static ServiceVersion V20240401Preview { get; } = new ServiceVersion(V20240401PreviewValue);
        /// <summary> The 2024-05-01-preview service API version label. </summary>
        public static ServiceVersion V20240501Preview { get; } = new ServiceVersion(V20240501PreviewValue);
        /// <summary> The 2024-06-01 (stable) service API version label. </summary>
        public static ServiceVersion V20240601 { get; } = new ServiceVersion(V20240601Value);
        /// <summary> The 2024-07-01-preview service API version label. </summary>
        public static ServiceVersion V20240701Preview { get; } = new ServiceVersion(V20240701PreviewValue);
        /// <summary> The 2024-08-01-preview service API version label. </summary>
        public static ServiceVersion V20240801Preview { get; } = new ServiceVersion(V20240801PreviewValue);
        /// <summary> Determines if two <see cref="ServiceVersion"/> values are the same. </summary>
        public static bool operator ==(ServiceVersion left, ServiceVersion right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ServiceVersion"/> values are not the same. </summary>
        public static bool operator !=(ServiceVersion left, ServiceVersion right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ServiceVersion"/>. </summary>
        public static implicit operator ServiceVersion(string value) => new ServiceVersion(value);
        /// <inheritdoc />
        public bool Equals(ServiceVersion other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
