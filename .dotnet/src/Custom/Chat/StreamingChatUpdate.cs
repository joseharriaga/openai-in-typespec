namespace OpenAI.Chat;

using System;
using System.Collections.Generic;
using System.Text.Json;

/// <summary>
/// Represents an incremental item of new data in a streaming response to a chat completion request.
/// </summary>
[CodeGenModel("CreateChatCompletionStreamResponse")]
public partial class StreamingChatUpdate
{
    private readonly int? _choiceIndex;
    private readonly int? _contentIndex;
    private readonly int? _toolCallIndex;

    private InternalCreateChatCompletionStreamResponseChoice Choice => _choiceIndex.HasValue
        ? Choices[_choiceIndex.Value]
        : null;
    private InternalChatCompletionStreamResponseDelta Delta => Choice?.Delta;

    // CUSTOM:
    // - Made private. This property does not add value in the context of a strongly-typed class.
    // - Changed type from string.
    /// <summary> The object type, which is always `chat.completion.chunk`. </summary>
    [CodeGenMember("Object")]
    internal InternalCreateChatCompletionStreamResponseObject Object { get; } = InternalCreateChatCompletionStreamResponseObject.ChatCompletionChunk;

    // CUSTOM: Made internal. We flatten the structure for usability.
    /// <summary>
    /// A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the
    /// last chunk if you set `stream_options: {"include_usage": true}`.
    /// </summary>
    [CodeGenMember("Choices")] 
    internal IReadOnlyList<InternalCreateChatCompletionStreamResponseChoice> Choices { get; }

    // CUSTOM: Renamed.
    /// <summary> The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp. </summary>
    [CodeGenMember("Created")]
    public DateTimeOffset CreatedAt { get; }

    // CUSTOM: Changed type from InternalCreateChatCompletionStreamResponseUsage.
    /// <summary>
    /// An optional field that will only be present when you set `stream_options: {"include_usage": true}` in your request.
    /// When present, it contains a null value except for the last chunk which contains the token usage statistics for the entire request.
    /// </summary>
    [CodeGenMember("Usage")]
    public ChatTokenUsage Usage { get; }

    // CUSTOM: Flattened choice property.
    /// <summary>
    /// Gets the <see cref="ChatFinishReason"/> associated with this update.
    /// </summary>
    public ChatFinishReason? FinishReason => Choice?.FinishReason;

    // CUSTOM: Flattened choice property.
    /// <summary>
    /// The log probability information for choices in the chat completion response, as requested via
    /// <see cref="ChatCompletionOptions.IncludeLogProbabilities"/>.
    /// </summary>
    public ChatLogProbabilityInfo LogProbabilityInfo => Choice?.Logprobs;

    /// <summary>
    /// Gets the content fragment associated with this update.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Corresponds to e.g. <c>$.choices[0].delta.content</c> in the underlying REST schema.
    /// </para>
    /// Each update contains only a small number of tokens. When presenting or reconstituting a full, streamed
    /// response, all <see cref="ContentUpdate"/> values for the same chat completions should be combined.
    /// </remarks>
    public ChatMessageContentPart ContentUpdate => _contentIndex.HasValue
        ? Delta?.Content[_contentIndex.Value]
        : null;

    // CUSTOM: Flattened choice delta property.
    /// <summary>
    /// Gets the <see cref="ChatMessageRole"/> associated with this update.
    /// </summary>
    /// <remarks>
    /// <see cref="ChatMessageRole"/> assignment typically occurs in a single update across a streamed Chat Completions
    /// and the value should be considered to be persist for all subsequent updates.
    /// </remarks>
    public ChatMessageRole? Role => Delta?.Role;

    // CUSTOM: Flattened choice delta property.
    /// <summary> Gets the tool calls. </summary>
    public StreamingChatToolCallUpdate ToolCallUpdate => _toolCallIndex.HasValue
        ? Delta?.ToolCalls[_toolCallIndex.Value]
        : null;

    // CUSTOM: Flattened choice delta property.
    /// <summary>
    /// Deprecated and replaced by <see cref="ToolCallUpdate"/>. The name and arguments of a function that
    /// should be called, as generated by the model.
    /// </summary>
    public StreamingChatFunctionCallUpdate FunctionCallUpdate => Delta?.FunctionCall;

    internal static List<StreamingChatUpdate> DeserializeStreamingChatCompletionUpdates(JsonElement element)
    {
        StreamingChatUpdate baseUpdate = DeserializeStreamingChatUpdate(element);
        List<StreamingChatUpdate> biteSizedUpdates = [];
        for (int choiceIndex = 0; choiceIndex < baseUpdate.Choices?.Count; choiceIndex++)
        {
            InternalCreateChatCompletionStreamResponseChoice choice = baseUpdate.Choices[choiceIndex];
            for (int contentIndex = 0; contentIndex < choice?.Delta?.Content?.Count; contentIndex++)
            {
                biteSizedUpdates.Add(new(baseUpdate, choiceIndex, contentIndex, null));
            }
            for (int toolCallIndex = 0; toolCallIndex < choice?.Delta?.ToolCalls?.Count; toolCallIndex++)
            {
                biteSizedUpdates.Add(new(baseUpdate, choiceIndex, null, toolCallIndex));
            }
        }
        return biteSizedUpdates.Count == 0 ? [baseUpdate] : biteSizedUpdates;
    }

    internal StreamingChatUpdate(StreamingChatUpdate baseUpdate, int? choiceIndex, int? contentIndex, int? toolCallIndex)
        : this(baseUpdate.Id, baseUpdate.Choices, baseUpdate.CreatedAt, baseUpdate.Model, baseUpdate.SystemFingerprint, baseUpdate.Object, baseUpdate.Usage, baseUpdate._serializedAdditionalRawData)
    {
        _choiceIndex = choiceIndex;
        _contentIndex = contentIndex;
        _toolCallIndex = toolCallIndex;
    }
}
