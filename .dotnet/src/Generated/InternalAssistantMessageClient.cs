// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading.Tasks;

namespace OpenAI.Assistants
{
    // Data plane generated sub-client.
    /// <summary> The InternalAssistantMessage sub-client. </summary>
    internal partial class InternalAssistantMessageClient
    {
        private const string AuthorizationHeader = "Authorization";
        private readonly ApiKeyCredential _keyCredential;
        private const string AuthorizationApiKeyPrefix = "Bearer";
        private readonly ClientPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual ClientPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of InternalAssistantMessageClient for mocking. </summary>
        protected InternalAssistantMessageClient()
        {
        }

        /// <summary> Create a message. </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to create a message for. </param>
        /// <param name="message"> The <see cref="MessageCreationOptions"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="message"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Create message. </remarks>
        public virtual async Task<ClientResult<ThreadMessage>> CreateMessageAsync(string threadId, MessageCreationOptions message)
        {
            Argument.AssertNotNullOrEmpty(threadId, nameof(threadId));
            Argument.AssertNotNull(message, nameof(message));

            using BinaryContent content = message.ToBinaryContent();
            ClientResult result = await CreateMessageAsync(threadId, content, null).ConfigureAwait(false);
            return ClientResult.FromValue(ThreadMessage.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Create a message. </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to create a message for. </param>
        /// <param name="message"> The <see cref="MessageCreationOptions"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="message"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Create message. </remarks>
        public virtual ClientResult<ThreadMessage> CreateMessage(string threadId, MessageCreationOptions message)
        {
            Argument.AssertNotNullOrEmpty(threadId, nameof(threadId));
            Argument.AssertNotNull(message, nameof(message));

            using BinaryContent content = message.ToBinaryContent();
            ClientResult result = CreateMessage(threadId, content, null);
            return ClientResult.FromValue(ThreadMessage.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Returns a list of messages for a given thread. </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) the messages belong to. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> List messages. </remarks>
        public virtual async Task<ClientResult<InternalListMessagesResponse>> GetMessagesAsync(string threadId, int? limit = null, ListOrder? order = null, string after = null, string before = null)
        {
            Argument.AssertNotNullOrEmpty(threadId, nameof(threadId));

            ClientResult result = await GetMessagesAsync(threadId, limit, order?.ToString(), after, before, null).ConfigureAwait(false);
            return ClientResult.FromValue(InternalListMessagesResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Returns a list of messages for a given thread. </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) the messages belong to. </param>
        /// <param name="limit">
        /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
        /// default is 20.
        /// </param>
        /// <param name="order">
        /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
        /// for descending order.
        /// </param>
        /// <param name="after">
        /// A cursor for use in pagination. `after` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include after=obj_foo in order to fetch the next page of the list.
        /// </param>
        /// <param name="before">
        /// A cursor for use in pagination. `before` is an object ID that defines your place in the list.
        /// For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
        /// subsequent call can include before=obj_foo in order to fetch the previous page of the list.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> List messages. </remarks>
        public virtual ClientResult<InternalListMessagesResponse> GetMessages(string threadId, int? limit = null, ListOrder? order = null, string after = null, string before = null)
        {
            Argument.AssertNotNullOrEmpty(threadId, nameof(threadId));

            ClientResult result = GetMessages(threadId, limit, order?.ToString(), after, before, null);
            return ClientResult.FromValue(InternalListMessagesResponse.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Retrieve a message. </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to retrieve. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="messageId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get message. </remarks>
        public virtual async Task<ClientResult<ThreadMessage>> GetMessageAsync(string threadId, string messageId)
        {
            Argument.AssertNotNullOrEmpty(threadId, nameof(threadId));
            Argument.AssertNotNullOrEmpty(messageId, nameof(messageId));

            ClientResult result = await GetMessageAsync(threadId, messageId, null).ConfigureAwait(false);
            return ClientResult.FromValue(ThreadMessage.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Retrieve a message. </summary>
        /// <param name="threadId"> The ID of the [thread](/docs/api-reference/threads) to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to retrieve. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/> or <paramref name="messageId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Get message. </remarks>
        public virtual ClientResult<ThreadMessage> GetMessage(string threadId, string messageId)
        {
            Argument.AssertNotNullOrEmpty(threadId, nameof(threadId));
            Argument.AssertNotNullOrEmpty(messageId, nameof(messageId));

            ClientResult result = GetMessage(threadId, messageId, null);
            return ClientResult.FromValue(ThreadMessage.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Modifies a message. </summary>
        /// <param name="threadId"> The ID of the thread to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to modify. </param>
        /// <param name="message"> The <see cref="MessageModificationOptions"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="message"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Modify message. </remarks>
        public virtual async Task<ClientResult<ThreadMessage>> ModifyMessageAsync(string threadId, string messageId, MessageModificationOptions message)
        {
            Argument.AssertNotNullOrEmpty(threadId, nameof(threadId));
            Argument.AssertNotNullOrEmpty(messageId, nameof(messageId));
            Argument.AssertNotNull(message, nameof(message));

            using BinaryContent content = message.ToBinaryContent();
            ClientResult result = await ModifyMessageAsync(threadId, messageId, content, null).ConfigureAwait(false);
            return ClientResult.FromValue(ThreadMessage.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Modifies a message. </summary>
        /// <param name="threadId"> The ID of the thread to which this message belongs. </param>
        /// <param name="messageId"> The ID of the message to modify. </param>
        /// <param name="message"> The <see cref="MessageModificationOptions"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="threadId"/>, <paramref name="messageId"/> or <paramref name="message"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="threadId"/> or <paramref name="messageId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Modify message. </remarks>
        public virtual ClientResult<ThreadMessage> ModifyMessage(string threadId, string messageId, MessageModificationOptions message)
        {
            Argument.AssertNotNullOrEmpty(threadId, nameof(threadId));
            Argument.AssertNotNullOrEmpty(messageId, nameof(messageId));
            Argument.AssertNotNull(message, nameof(message));

            using BinaryContent content = message.ToBinaryContent();
            ClientResult result = ModifyMessage(threadId, messageId, content, null);
            return ClientResult.FromValue(ThreadMessage.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        internal PipelineMessage CreateCreateMessageRequest(string threadId, BinaryContent content, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "POST";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/threads/", false);
            uri.AppendPath(threadId, true);
            uri.AppendPath("/messages", false);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            request.Headers.Set("Content-Type", "application/json");
            request.Content = content;
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetMessagesRequest(string threadId, int? limit, string order, string after, string before, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/threads/", false);
            uri.AppendPath(threadId, true);
            uri.AppendPath("/messages", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (order != null)
            {
                uri.AppendQuery("order", order, true);
            }
            if (after != null)
            {
                uri.AppendQuery("after", after, true);
            }
            if (before != null)
            {
                uri.AppendQuery("before", before, true);
            }
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetMessageRequest(string threadId, string messageId, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/threads/", false);
            uri.AppendPath(threadId, true);
            uri.AppendPath("/messages/", false);
            uri.AppendPath(messageId, true);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateModifyMessageRequest(string threadId, string messageId, BinaryContent content, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "POST";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/threads/", false);
            uri.AppendPath(threadId, true);
            uri.AppendPath("/messages/", false);
            uri.AppendPath(messageId, true);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            request.Headers.Set("Content-Type", "application/json");
            request.Content = content;
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateDeleteMessageRequest(string threadId, string messageId, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "DELETE";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/threads/", false);
            uri.AppendPath(threadId, true);
            uri.AppendPath("/messages/", false);
            uri.AppendPath(messageId, true);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        private static PipelineMessageClassifier _pipelineMessageClassifier200;
        private static PipelineMessageClassifier PipelineMessageClassifier200 => _pipelineMessageClassifier200 ??= PipelineMessageClassifier.Create(stackalloc ushort[] { 200 });
    }
}
