// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;

namespace OpenAI.Audio
{
    /// <summary> Represents a verbose json transcription response returned by model, based on the provided input. </summary>
    public partial class AudioTranscription
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary>
        /// Gets the dictionary containing additional raw data to serialize.
        /// </summary>
        /// <remarks>
        /// NOTE: This mechanism added for subclients pending availability of a C# language feature.
        ///       It is subject to change and not intended for stable use.
        /// </remarks>
        [Experimental("OPENAI002")]
        [EditorBrowsable(EditorBrowsableState.Never)]
        public IDictionary<string, BinaryData> SerializedAdditionalRawData
            => _serializedAdditionalRawData ??= new ChangeTrackingDictionary<string, BinaryData>();

        /// <summary> Initializes a new instance of <see cref="AudioTranscription"/>. </summary>
        /// <param name="language"> The language of the input audio. </param>
        /// <param name="duration"> The duration of the input audio. </param>
        /// <param name="text"> The transcribed text. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="language"/> or <paramref name="text"/> is null. </exception>
        internal AudioTranscription(string language, TimeSpan? duration, string text)
        {
            Argument.AssertNotNull(language, nameof(language));
            Argument.AssertNotNull(text, nameof(text));

            Language = language;
            Duration = duration;
            Text = text;
            Words = new ChangeTrackingList<TranscribedWord>();
            Segments = new ChangeTrackingList<TranscribedSegment>();
        }

        /// <summary> Initializes a new instance of <see cref="AudioTranscription"/>. </summary>
        /// <param name="task"> The task label. </param>
        /// <param name="language"> The language of the input audio. </param>
        /// <param name="duration"> The duration of the input audio. </param>
        /// <param name="text"> The transcribed text. </param>
        /// <param name="words"> Extracted words and their corresponding timestamps. </param>
        /// <param name="segments"> Segments of the transcribed text and their corresponding details. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AudioTranscription(CreateTranscriptionResponseVerboseJsonTask task, string language, TimeSpan? duration, string text, IReadOnlyList<TranscribedWord> words, IReadOnlyList<TranscribedSegment> segments, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Task = task;
            Language = language;
            Duration = duration;
            Text = text;
            Words = words;
            Segments = segments;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AudioTranscription"/> for deserialization. </summary>
        internal AudioTranscription()
        {
        }

        /// <summary> The language of the input audio. </summary>
        public string Language { get; }
        /// <summary> The transcribed text. </summary>
        public string Text { get; }
        /// <summary> Extracted words and their corresponding timestamps. </summary>
        public IReadOnlyList<TranscribedWord> Words { get; }
        /// <summary> Segments of the transcribed text and their corresponding details. </summary>
        public IReadOnlyList<TranscribedSegment> Segments { get; }
    }
}

