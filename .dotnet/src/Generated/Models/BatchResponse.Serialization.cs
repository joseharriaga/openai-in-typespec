// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace OpenAI.Internal.Models
{
    internal partial class BatchResponse : IJsonModel<BatchResponse>
    {
        void IJsonModel<BatchResponse>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BatchResponse>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BatchResponse)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("id"u8);
            writer.WriteStringValue(Id);
            writer.WritePropertyName("object"u8);
            writer.WriteStringValue(Object.ToString());
            writer.WritePropertyName("endpoint"u8);
            writer.WriteStringValue(Endpoint);
            if (Errors != null)
            {
                writer.WritePropertyName("errors"u8);
                writer.WriteObjectValue<BatchResponseErrors>(Errors, options);
            }
            else
            {
                writer.WriteNull("errors");
            }
            writer.WritePropertyName("input_file_id"u8);
            writer.WriteStringValue(InputFileId);
            writer.WritePropertyName("completion_window"u8);
            writer.WriteStringValue(CompletionWindow);
            writer.WritePropertyName("status"u8);
            writer.WriteStringValue(Status);
            writer.WritePropertyName("output_file_id"u8);
            writer.WriteStringValue(OutputFileId);
            writer.WritePropertyName("error_file_id"u8);
            writer.WriteStringValue(ErrorFileId);
            writer.WritePropertyName("created_at"u8);
            writer.WriteNumberValue(CreatedAt, "U");
            if (InProgressAt != null)
            {
                writer.WritePropertyName("in_progress_at"u8);
                writer.WriteStringValue(InProgressAt.Value, "O");
            }
            else
            {
                writer.WriteNull("in_progress_at");
            }
            if (ExpiresAt != null)
            {
                writer.WritePropertyName("expires_at"u8);
                writer.WriteStringValue(ExpiresAt.Value, "O");
            }
            else
            {
                writer.WriteNull("expires_at");
            }
            if (FinalizingAt != null)
            {
                writer.WritePropertyName("finalizing_at"u8);
                writer.WriteStringValue(FinalizingAt.Value, "O");
            }
            else
            {
                writer.WriteNull("finalizing_at");
            }
            if (CompletedAt != null)
            {
                writer.WritePropertyName("completed_at"u8);
                writer.WriteStringValue(CompletedAt.Value, "O");
            }
            else
            {
                writer.WriteNull("completed_at");
            }
            if (FailedAt != null)
            {
                writer.WritePropertyName("failed_at"u8);
                writer.WriteStringValue(FailedAt.Value, "O");
            }
            else
            {
                writer.WriteNull("failed_at");
            }
            if (ExpiredAt != null)
            {
                writer.WritePropertyName("expired_at"u8);
                writer.WriteStringValue(ExpiredAt.Value, "O");
            }
            else
            {
                writer.WriteNull("expired_at");
            }
            if (CancellingAt != null)
            {
                writer.WritePropertyName("cancelling_at"u8);
                writer.WriteStringValue(CancellingAt.Value, "O");
            }
            else
            {
                writer.WriteNull("cancelling_at");
            }
            if (CancelledAt != null)
            {
                writer.WritePropertyName("cancelled_at"u8);
                writer.WriteStringValue(CancelledAt.Value, "O");
            }
            else
            {
                writer.WriteNull("cancelled_at");
            }
            writer.WritePropertyName("request_counts"u8);
            writer.WriteObjectValue<BatchResponseRequestCounts>(RequestCounts, options);
            if (Optional.IsCollectionDefined(Metadata))
            {
                if (Metadata != null)
                {
                    writer.WritePropertyName("metadata"u8);
                    writer.WriteStartObject();
                    foreach (var item in Metadata)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteStringValue(item.Value);
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNull("metadata");
                }
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        BatchResponse IJsonModel<BatchResponse>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BatchResponse>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BatchResponse)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBatchResponse(document.RootElement, options);
        }

        internal static BatchResponse DeserializeBatchResponse(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string id = default;
            BatchResponseObject @object = default;
            string endpoint = default;
            BatchResponseErrors errors = default;
            string inputFileId = default;
            string completionWindow = default;
            string status = default;
            string outputFileId = default;
            string errorFileId = default;
            DateTimeOffset createdAt = default;
            DateTimeOffset? inProgressAt = default;
            DateTimeOffset? expiresAt = default;
            DateTimeOffset? finalizingAt = default;
            DateTimeOffset? completedAt = default;
            DateTimeOffset? failedAt = default;
            DateTimeOffset? expiredAt = default;
            DateTimeOffset? cancellingAt = default;
            DateTimeOffset? cancelledAt = default;
            BatchResponseRequestCounts requestCounts = default;
            IReadOnlyDictionary<string, string> metadata = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("object"u8))
                {
                    @object = new BatchResponseObject(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("endpoint"u8))
                {
                    endpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        errors = null;
                        continue;
                    }
                    errors = BatchResponseErrors.DeserializeBatchResponseErrors(property.Value, options);
                    continue;
                }
                if (property.NameEquals("input_file_id"u8))
                {
                    inputFileId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("completion_window"u8))
                {
                    completionWindow = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("output_file_id"u8))
                {
                    outputFileId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("error_file_id"u8))
                {
                    errorFileId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("created_at"u8))
                {
                    createdAt = DateTimeOffset.FromUnixTimeSeconds(property.Value.GetInt64());
                    continue;
                }
                if (property.NameEquals("in_progress_at"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        inProgressAt = null;
                        continue;
                    }
                    // BUG: https://github.com/Azure/autorest.csharp/issues/4296
                    // inProgressAt = property.Value.GetDateTimeOffset("O");
                    inProgressAt = DateTimeOffset.FromUnixTimeSeconds(property.Value.GetInt64());
                    continue;
                }
                if (property.NameEquals("expires_at"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        expiresAt = null;
                        continue;
                    }
                    // BUG: https://github.com/Azure/autorest.csharp/issues/4296
                    // expiresAt = property.Value.GetDateTimeOffset("O");
                    expiresAt = DateTimeOffset.FromUnixTimeSeconds(property.Value.GetInt64());
                    continue;
                }
                if (property.NameEquals("finalizing_at"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        finalizingAt = null;
                        continue;
                    }
                    // BUG: https://github.com/Azure/autorest.csharp/issues/4296
                    // finalizingAt = property.Value.GetDateTimeOffset("O");
                    finalizingAt = DateTimeOffset.FromUnixTimeSeconds(property.Value.GetInt64());
                    continue;
                }
                if (property.NameEquals("completed_at"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        completedAt = null;
                        continue;
                    }
                    // BUG: https://github.com/Azure/autorest.csharp/issues/4296
                    // completedAt = property.Value.GetDateTimeOffset("O");
                    completedAt = DateTimeOffset.FromUnixTimeSeconds(property.Value.GetInt64());
                    continue;
                }
                if (property.NameEquals("failed_at"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        failedAt = null;
                        continue;
                    }
                    // BUG: https://github.com/Azure/autorest.csharp/issues/4296
                    // failedAt = property.Value.GetDateTimeOffset("O");
                    failedAt = DateTimeOffset.FromUnixTimeSeconds(property.Value.GetInt64());
                    continue;
                }
                if (property.NameEquals("expired_at"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        expiredAt = null;
                        continue;
                    }
                    // BUG: https://github.com/Azure/autorest.csharp/issues/4296
                    // expiredAt = property.Value.GetDateTimeOffset("O");
                    expiredAt = DateTimeOffset.FromUnixTimeSeconds(property.Value.GetInt64());
                    continue;
                }
                if (property.NameEquals("cancelling_at"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        cancellingAt = null;
                        continue;
                    }
                    // BUG: https://github.com/Azure/autorest.csharp/issues/4296
                    // // BUG: https://github.com/Azure/autorest.csharp/issues/4296
                    // completedAt = property.Value.GetDateTimeOffset("O");
                    completedAt = DateTimeOffset.FromUnixTimeSeconds(property.Value.GetInt64());
                    completedAt = DateTimeOffset.FromUnixTimeSeconds(property.Value.GetInt64());
                    continue;
                }
                if (property.NameEquals("cancelled_at"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        cancelledAt = null;
                        continue;
                    }
                    // BUG: https://github.com/Azure/autorest.csharp/issues/4296
                    // cancelledAt = property.Value.GetDateTimeOffset("O");
                    cancelledAt = DateTimeOffset.FromUnixTimeSeconds(property.Value.GetInt64());
                    continue;
                }
                if (property.NameEquals("request_counts"u8))
                {
                    requestCounts = BatchResponseRequestCounts.DeserializeBatchResponseRequestCounts(property.Value, options);
                    continue;
                }
                if (property.NameEquals("metadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    metadata = dictionary;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new BatchResponse(
                id,
                @object,
                endpoint,
                errors,
                inputFileId,
                completionWindow,
                status,
                outputFileId,
                errorFileId,
                createdAt,
                inProgressAt,
                expiresAt,
                finalizingAt,
                completedAt,
                failedAt,
                expiredAt,
                cancellingAt,
                cancelledAt,
                requestCounts,
                metadata ?? new ChangeTrackingDictionary<string, string>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<BatchResponse>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BatchResponse>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(BatchResponse)} does not support writing '{options.Format}' format.");
            }
        }

        BatchResponse IPersistableModel<BatchResponse>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BatchResponse>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeBatchResponse(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BatchResponse)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<BatchResponse>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The result to deserialize the model from. </param>
        internal static BatchResponse FromResponse(PipelineResponse response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeBatchResponse(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestBody. </summary>
        internal virtual BinaryContent ToBinaryBody()
        {
            return BinaryContent.Create(this, new ModelReaderWriterOptions("W"));
        }
    }
}
