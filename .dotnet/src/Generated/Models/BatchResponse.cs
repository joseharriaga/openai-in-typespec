// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace OpenAI.Internal.Models
{
    /// <summary> The response body for batch operation. </summary>
    internal partial class BatchResponse
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BatchResponse"/>. </summary>
        /// <param name="id"> The ID of the batch, as used in other operations. </param>
        /// <param name="endpoint"> The API endpoint used by the batch. </param>
        /// <param name="errors"></param>
        /// <param name="inputFileId"> The ID of the input file used for the batch. </param>
        /// <param name="completionWindow"> The timeframe within which the batch should be processed, as measured from its creation time. </param>
        /// <param name="status"> The current status of the batch. </param>
        /// <param name="outputFileId">
        /// The ID of the file that contains the outputs of the requests within the batch that were
        /// successfully executed.
        /// </param>
        /// <param name="errorFileId">
        /// The ID of the file that contains the outputs of the requests within the batch that encountered
        /// errors during execution.
        /// </param>
        /// <param name="createdAt"> The timestamp indicating when the batch was created. </param>
        /// <param name="inProgressAt"> The timestamp indicating when the batch started processing. </param>
        /// <param name="expiresAt"> The timestamp indicating when the batch will expire. </param>
        /// <param name="finalizingAt"> The timestamp indicating when the batch started finalization. </param>
        /// <param name="completedAt"> The timestamp indicating when the batch was successfully completed. </param>
        /// <param name="failedAt"> The timestamp indicating when the batch failed. </param>
        /// <param name="expiredAt"> The timestamp indicating when the batch expired before completing. </param>
        /// <param name="cancellingAt"> The timestamp indicating when the batch began cancellation. </param>
        /// <param name="cancelledAt"> The timestamp indicating when the batch completed cancellation. </param>
        /// <param name="requestCounts"> The request counts for different statuses within the batch. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="endpoint"/>, <paramref name="inputFileId"/>, <paramref name="completionWindow"/>, <paramref name="status"/>, <paramref name="outputFileId"/>, <paramref name="errorFileId"/> or <paramref name="requestCounts"/> is null. </exception>
        internal BatchResponse(string id, string endpoint, BatchResponseErrors errors, string inputFileId, string completionWindow, string status, string outputFileId, string errorFileId, DateTimeOffset createdAt, DateTimeOffset? inProgressAt, DateTimeOffset? expiresAt, DateTimeOffset? finalizingAt, DateTimeOffset? completedAt, DateTimeOffset? failedAt, DateTimeOffset? expiredAt, DateTimeOffset? cancellingAt, DateTimeOffset? cancelledAt, BatchResponseRequestCounts requestCounts)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(inputFileId, nameof(inputFileId));
            Argument.AssertNotNull(completionWindow, nameof(completionWindow));
            Argument.AssertNotNull(status, nameof(status));
            Argument.AssertNotNull(outputFileId, nameof(outputFileId));
            Argument.AssertNotNull(errorFileId, nameof(errorFileId));
            Argument.AssertNotNull(requestCounts, nameof(requestCounts));

            Id = id;
            Endpoint = endpoint;
            Errors = errors;
            InputFileId = inputFileId;
            CompletionWindow = completionWindow;
            Status = status;
            OutputFileId = outputFileId;
            ErrorFileId = errorFileId;
            CreatedAt = createdAt;
            InProgressAt = inProgressAt;
            ExpiresAt = expiresAt;
            FinalizingAt = finalizingAt;
            CompletedAt = completedAt;
            FailedAt = failedAt;
            ExpiredAt = expiredAt;
            CancellingAt = cancellingAt;
            CancelledAt = cancelledAt;
            RequestCounts = requestCounts;
            Metadata = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="BatchResponse"/>. </summary>
        /// <param name="id"> The ID of the batch, as used in other operations. </param>
        /// <param name="object"> The object type, which is always 'batch'. </param>
        /// <param name="endpoint"> The API endpoint used by the batch. </param>
        /// <param name="errors"></param>
        /// <param name="inputFileId"> The ID of the input file used for the batch. </param>
        /// <param name="completionWindow"> The timeframe within which the batch should be processed, as measured from its creation time. </param>
        /// <param name="status"> The current status of the batch. </param>
        /// <param name="outputFileId">
        /// The ID of the file that contains the outputs of the requests within the batch that were
        /// successfully executed.
        /// </param>
        /// <param name="errorFileId">
        /// The ID of the file that contains the outputs of the requests within the batch that encountered
        /// errors during execution.
        /// </param>
        /// <param name="createdAt"> The timestamp indicating when the batch was created. </param>
        /// <param name="inProgressAt"> The timestamp indicating when the batch started processing. </param>
        /// <param name="expiresAt"> The timestamp indicating when the batch will expire. </param>
        /// <param name="finalizingAt"> The timestamp indicating when the batch started finalization. </param>
        /// <param name="completedAt"> The timestamp indicating when the batch was successfully completed. </param>
        /// <param name="failedAt"> The timestamp indicating when the batch failed. </param>
        /// <param name="expiredAt"> The timestamp indicating when the batch expired before completing. </param>
        /// <param name="cancellingAt"> The timestamp indicating when the batch began cancellation. </param>
        /// <param name="cancelledAt"> The timestamp indicating when the batch completed cancellation. </param>
        /// <param name="requestCounts"> The request counts for different statuses within the batch. </param>
        /// <param name="metadata">
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
        /// additional information about the object in a structured format. Keys can be a maximum of 64
        /// characters long and values can be a maxium of 512 characters long.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BatchResponse(string id, BatchResponseObject @object, string endpoint, BatchResponseErrors errors, string inputFileId, string completionWindow, string status, string outputFileId, string errorFileId, DateTimeOffset createdAt, DateTimeOffset? inProgressAt, DateTimeOffset? expiresAt, DateTimeOffset? finalizingAt, DateTimeOffset? completedAt, DateTimeOffset? failedAt, DateTimeOffset? expiredAt, DateTimeOffset? cancellingAt, DateTimeOffset? cancelledAt, BatchResponseRequestCounts requestCounts, IReadOnlyDictionary<string, string> metadata, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Object = @object;
            Endpoint = endpoint;
            Errors = errors;
            InputFileId = inputFileId;
            CompletionWindow = completionWindow;
            Status = status;
            OutputFileId = outputFileId;
            ErrorFileId = errorFileId;
            CreatedAt = createdAt;
            InProgressAt = inProgressAt;
            ExpiresAt = expiresAt;
            FinalizingAt = finalizingAt;
            CompletedAt = completedAt;
            FailedAt = failedAt;
            ExpiredAt = expiredAt;
            CancellingAt = cancellingAt;
            CancelledAt = cancelledAt;
            RequestCounts = requestCounts;
            Metadata = metadata;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BatchResponse"/> for deserialization. </summary>
        internal BatchResponse()
        {
        }

        /// <summary> The ID of the batch, as used in other operations. </summary>
        public string Id { get; }
        /// <summary> The object type, which is always 'batch'. </summary>
        public BatchResponseObject Object { get; } = BatchResponseObject.Batch;

        /// <summary> The API endpoint used by the batch. </summary>
        public string Endpoint { get; }
        /// <summary> Gets the errors. </summary>
        public BatchResponseErrors Errors { get; }
        /// <summary> The ID of the input file used for the batch. </summary>
        public string InputFileId { get; }
        /// <summary> The timeframe within which the batch should be processed, as measured from its creation time. </summary>
        public string CompletionWindow { get; }
        /// <summary> The current status of the batch. </summary>
        public string Status { get; }
        /// <summary>
        /// The ID of the file that contains the outputs of the requests within the batch that were
        /// successfully executed.
        /// </summary>
        public string OutputFileId { get; }
        /// <summary>
        /// The ID of the file that contains the outputs of the requests within the batch that encountered
        /// errors during execution.
        /// </summary>
        public string ErrorFileId { get; }
        /// <summary> The timestamp indicating when the batch was created. </summary>
        public DateTimeOffset CreatedAt { get; }
        /// <summary> The timestamp indicating when the batch started processing. </summary>
        public DateTimeOffset? InProgressAt { get; }
        /// <summary> The timestamp indicating when the batch will expire. </summary>
        public DateTimeOffset? ExpiresAt { get; }
        /// <summary> The timestamp indicating when the batch started finalization. </summary>
        public DateTimeOffset? FinalizingAt { get; }
        /// <summary> The timestamp indicating when the batch was successfully completed. </summary>
        public DateTimeOffset? CompletedAt { get; }
        /// <summary> The timestamp indicating when the batch failed. </summary>
        public DateTimeOffset? FailedAt { get; }
        /// <summary> The timestamp indicating when the batch expired before completing. </summary>
        public DateTimeOffset? ExpiredAt { get; }
        /// <summary> The timestamp indicating when the batch began cancellation. </summary>
        public DateTimeOffset? CancellingAt { get; }
        /// <summary> The timestamp indicating when the batch completed cancellation. </summary>
        public DateTimeOffset? CancelledAt { get; }
        /// <summary> The request counts for different statuses within the batch. </summary>
        public BatchResponseRequestCounts RequestCounts { get; }
        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
        /// additional information about the object in a structured format. Keys can be a maximum of 64
        /// characters long and values can be a maxium of 512 characters long.
        /// </summary>
        public IReadOnlyDictionary<string, string> Metadata { get; }
    }
}
