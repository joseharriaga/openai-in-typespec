// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace OpenAI.Internal.Models
{
    /// <summary> The per-line object in a batch output file. </summary>
    internal partial class BatchResponseOutputLine
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BatchResponseOutputLine"/>. </summary>
        /// <param name="id"> The system-provided, unique ID of the single batch output. </param>
        /// <param name="customId"> A developer-provided, per-request ID used to match inputs to outputs. </param>
        /// <param name="response"> The JSON body of the response. </param>
        /// <param name="error"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="customId"/> is null. </exception>
        internal BatchResponseOutputLine(string id, string customId, IReadOnlyDictionary<string, BinaryData> response, BatchResponseOutputLineError error)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(customId, nameof(customId));

            Id = id;
            CustomId = customId;
            Response = response;
            Error = error;
        }

        /// <summary> Initializes a new instance of <see cref="BatchResponseOutputLine"/>. </summary>
        /// <param name="id"> The system-provided, unique ID of the single batch output. </param>
        /// <param name="customId"> A developer-provided, per-request ID used to match inputs to outputs. </param>
        /// <param name="response"> The JSON body of the response. </param>
        /// <param name="error"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BatchResponseOutputLine(string id, string customId, IReadOnlyDictionary<string, BinaryData> response, BatchResponseOutputLineError error, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            CustomId = customId;
            Response = response;
            Error = error;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BatchResponseOutputLine"/> for deserialization. </summary>
        internal BatchResponseOutputLine()
        {
        }

        /// <summary> The system-provided, unique ID of the single batch output. </summary>
        public string Id { get; }
        /// <summary> A developer-provided, per-request ID used to match inputs to outputs. </summary>
        public string CustomId { get; }
        /// <summary>
        /// The JSON body of the response.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> Response { get; }
        /// <summary> Gets the error. </summary>
        public BatchResponseOutputLineError Error { get; }
    }
}
