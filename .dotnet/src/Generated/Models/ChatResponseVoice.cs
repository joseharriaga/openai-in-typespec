// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace OpenAI.Chat
{
    public readonly partial struct ChatResponseVoice : IEquatable<ChatResponseVoice>
    {
        private readonly string _value;

        public ChatResponseVoice(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AlloyValue = "alloy";
        private const string EchoValue = "echo";
        private const string FableValue = "fable";
        private const string OnyxValue = "onyx";
        private const string NovaValue = "nova";
        private const string ShimmerValue = "shimmer";

        public static ChatResponseVoice Alloy { get; } = new ChatResponseVoice(AlloyValue);
        public static ChatResponseVoice Echo { get; } = new ChatResponseVoice(EchoValue);
        public static ChatResponseVoice Fable { get; } = new ChatResponseVoice(FableValue);
        public static ChatResponseVoice Onyx { get; } = new ChatResponseVoice(OnyxValue);
        public static ChatResponseVoice Nova { get; } = new ChatResponseVoice(NovaValue);
        public static ChatResponseVoice Shimmer { get; } = new ChatResponseVoice(ShimmerValue);
        public static bool operator ==(ChatResponseVoice left, ChatResponseVoice right) => left.Equals(right);
        public static bool operator !=(ChatResponseVoice left, ChatResponseVoice right) => !left.Equals(right);
        public static implicit operator ChatResponseVoice(string value) => new ChatResponseVoice(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ChatResponseVoice other && Equals(other);
        public bool Equals(ChatResponseVoice other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        public override string ToString() => _value;
    }
}
