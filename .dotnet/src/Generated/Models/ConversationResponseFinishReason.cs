// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace OpenAI.RealtimeConversation
{
    public readonly partial struct ConversationResponseFinishReason : IEquatable<ConversationResponseFinishReason>
    {
        private readonly string _value;

        public ConversationResponseFinishReason(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TurnDetectedValue = "turn_detected";
        private const string ClientCancelledValue = "client_cancelled";
        private const string MaxOutputTokensValue = "max_output_tokens";
        private const string ContentFilterValue = "content_filter";

        public static ConversationResponseFinishReason TurnDetected { get; } = new ConversationResponseFinishReason(TurnDetectedValue);
        public static ConversationResponseFinishReason ClientCancelled { get; } = new ConversationResponseFinishReason(ClientCancelledValue);
        public static ConversationResponseFinishReason MaxOutputTokens { get; } = new ConversationResponseFinishReason(MaxOutputTokensValue);
        public static ConversationResponseFinishReason ContentFilter { get; } = new ConversationResponseFinishReason(ContentFilterValue);
        public static bool operator ==(ConversationResponseFinishReason left, ConversationResponseFinishReason right) => left.Equals(right);
        public static bool operator !=(ConversationResponseFinishReason left, ConversationResponseFinishReason right) => !left.Equals(right);
        public static implicit operator ConversationResponseFinishReason(string value) => new ConversationResponseFinishReason(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConversationResponseFinishReason other && Equals(other);
        public bool Equals(ConversationResponseFinishReason other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        public override string ToString() => _value;
    }
}
