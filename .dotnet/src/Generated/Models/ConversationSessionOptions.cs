// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using OpenAI;

namespace OpenAI.RealtimeConversation
{
    public partial class ConversationSessionOptions
    {
        private protected IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        public ConversationSessionOptions()
        {
            Tools = new ChangeTrackingList<ConversationTool>();
            _internalModalities = new ChangeTrackingList<InternalRealtimeRequestSessionUpdateCommandSessionModality>();
        }

        internal ConversationSessionOptions(ConversationVoice? voice, string instructions, ConversationAudioFormat? inputAudioFormat, ConversationAudioFormat? outputAudioFormat, IList<ConversationTool> tools, float? temperature, string model, ConversationTurnDetectionOptions turnDetectionOptions, ConversationInputTranscriptionOptions inputTranscriptionOptions, IList<InternalRealtimeRequestSessionUpdateCommandSessionModality> internalModalities, BinaryData internalToolChoice, BinaryData maxResponseOutputTokens, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Voice = voice;
            Instructions = instructions;
            InputAudioFormat = inputAudioFormat;
            OutputAudioFormat = outputAudioFormat;
            Tools = tools;
            Temperature = temperature;
            Model = model;
            TurnDetectionOptions = turnDetectionOptions;
            InputTranscriptionOptions = inputTranscriptionOptions;
            _internalModalities = internalModalities;
            _internalToolChoice = internalToolChoice;
            _maxResponseOutputTokens = maxResponseOutputTokens;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        public ConversationVoice? Voice { get; set; }

        public string Instructions { get; set; }

        public ConversationAudioFormat? InputAudioFormat { get; set; }

        public ConversationAudioFormat? OutputAudioFormat { get; set; }

        public IList<ConversationTool> Tools { get; }

        public float? Temperature { get; set; }

        internal IDictionary<string, BinaryData> SerializedAdditionalRawData
        {
            get => _additionalBinaryDataProperties;
            set => _additionalBinaryDataProperties = value;
        }
    }
}
