// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace OpenAI.Internal.Models
{
    /// <summary> The request body for an operation that creates a new batch. </summary>
    internal partial class CreateBatchRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CreateBatchRequest"/>. </summary>
        /// <param name="inputFileId">
        /// The ID of an uploaded file that contains requests for the new batch.
        ///
        /// Input must be formatted as a JSONL file, and must be uploaded with the purpose 'batch'.
        /// </param>
        /// <param name="endpoint">
        /// The endpoint to be used for all requests in the batch.
        ///
        /// Currently, only '/v1/chat/completions' is supported.
        /// </param>
        /// <param name="completionWindow">
        /// The timeframe within which the batch should be processed.
        ///
        /// Currently, only '24h' is supported.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="inputFileId"/>, <paramref name="endpoint"/> or <paramref name="completionWindow"/> is null. </exception>
        public CreateBatchRequest(string inputFileId, string endpoint, string completionWindow)
        {
            Argument.AssertNotNull(inputFileId, nameof(inputFileId));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(completionWindow, nameof(completionWindow));

            InputFileId = inputFileId;
            Endpoint = endpoint;
            CompletionWindow = completionWindow;
            Metadata = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="CreateBatchRequest"/>. </summary>
        /// <param name="inputFileId">
        /// The ID of an uploaded file that contains requests for the new batch.
        ///
        /// Input must be formatted as a JSONL file, and must be uploaded with the purpose 'batch'.
        /// </param>
        /// <param name="endpoint">
        /// The endpoint to be used for all requests in the batch.
        ///
        /// Currently, only '/v1/chat/completions' is supported.
        /// </param>
        /// <param name="completionWindow">
        /// The timeframe within which the batch should be processed.
        ///
        /// Currently, only '24h' is supported.
        /// </param>
        /// <param name="metadata"> Optional, custom metadata for the batch. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CreateBatchRequest(string inputFileId, string endpoint, string completionWindow, IDictionary<string, string> metadata, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            InputFileId = inputFileId;
            Endpoint = endpoint;
            CompletionWindow = completionWindow;
            Metadata = metadata;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CreateBatchRequest"/> for deserialization. </summary>
        internal CreateBatchRequest()
        {
        }

        /// <summary>
        /// The ID of an uploaded file that contains requests for the new batch.
        ///
        /// Input must be formatted as a JSONL file, and must be uploaded with the purpose 'batch'.
        /// </summary>
        public string InputFileId { get; }
        /// <summary>
        /// The endpoint to be used for all requests in the batch.
        ///
        /// Currently, only '/v1/chat/completions' is supported.
        /// </summary>
        public string Endpoint { get; }
        /// <summary>
        /// The timeframe within which the batch should be processed.
        ///
        /// Currently, only '24h' is supported.
        /// </summary>
        public string CompletionWindow { get; }
        /// <summary> Optional, custom metadata for the batch. </summary>
        public IDictionary<string, string> Metadata { get; set; }
    }
}
