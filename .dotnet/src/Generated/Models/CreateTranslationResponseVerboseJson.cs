// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace OpenAI.Internal.Models
{
    /// <summary> The CreateTranslationResponseVerboseJson. </summary>
    internal partial class CreateTranslationResponseVerboseJson
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CreateTranslationResponseVerboseJson"/>. </summary>
        /// <param name="language"> The language of the output translation (always `english`). </param>
        /// <param name="duration"> The duration of the input audio. </param>
        /// <param name="text"> The translated text. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="language"/> or <paramref name="text"/> is null. </exception>
        internal CreateTranslationResponseVerboseJson(string language, TimeSpan duration, string text)
        {
            Argument.AssertNotNull(language, nameof(language));
            Argument.AssertNotNull(text, nameof(text));

            Language = language;
            Duration = duration;
            Text = text;
            Segments = new ChangeTrackingList<TranscriptionSegment>();
        }

        /// <summary> Initializes a new instance of <see cref="CreateTranslationResponseVerboseJson"/>. </summary>
        /// <param name="task"> The task label. </param>
        /// <param name="language"> The language of the output translation (always `english`). </param>
        /// <param name="duration"> The duration of the input audio. </param>
        /// <param name="text"> The translated text. </param>
        /// <param name="segments"> Segments of the translated text and their corresponding details. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CreateTranslationResponseVerboseJson(CreateTranslationResponseVerboseJsonTask task, string language, TimeSpan duration, string text, IReadOnlyList<TranscriptionSegment> segments, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Task = task;
            Language = language;
            Duration = duration;
            Text = text;
            Segments = segments;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CreateTranslationResponseVerboseJson"/> for deserialization. </summary>
        internal CreateTranslationResponseVerboseJson()
        {
        }

        /// <summary> The task label. </summary>
        public CreateTranslationResponseVerboseJsonTask Task { get; } = CreateTranslationResponseVerboseJsonTask.Translate;

        /// <summary> The language of the output translation (always `english`). </summary>
        public string Language { get; }
        /// <summary> The duration of the input audio. </summary>
        public TimeSpan Duration { get; }
        /// <summary> The translated text. </summary>
        public string Text { get; }
        /// <summary> Segments of the translated text and their corresponding details. </summary>
        public IReadOnlyList<TranscriptionSegment> Segments { get; }
    }
}
