// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace OpenAI.Embeddings
{
    /// <summary> Enum for encoding_format in EmbeddingOptions. </summary>
    internal readonly partial struct EmbeddingOptionsEncodingFormat : IEquatable<EmbeddingOptionsEncodingFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EmbeddingOptionsEncodingFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EmbeddingOptionsEncodingFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FloatValue = "float";
        private const string Base64Value = "base64";

        /// <summary> float. </summary>
        public static EmbeddingOptionsEncodingFormat Float { get; } = new EmbeddingOptionsEncodingFormat(FloatValue);
        /// <summary> base64. </summary>
        public static EmbeddingOptionsEncodingFormat Base64 { get; } = new EmbeddingOptionsEncodingFormat(Base64Value);
        /// <summary> Determines if two <see cref="EmbeddingOptionsEncodingFormat"/> values are the same. </summary>
        public static bool operator ==(EmbeddingOptionsEncodingFormat left, EmbeddingOptionsEncodingFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EmbeddingOptionsEncodingFormat"/> values are not the same. </summary>
        public static bool operator !=(EmbeddingOptionsEncodingFormat left, EmbeddingOptionsEncodingFormat right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EmbeddingOptionsEncodingFormat"/>. </summary>
        public static implicit operator EmbeddingOptionsEncodingFormat(string value) => new EmbeddingOptionsEncodingFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EmbeddingOptionsEncodingFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EmbeddingOptionsEncodingFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
