// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace OpenAI.Chat
{
    internal readonly partial struct InternalClientOnlyChatCompletionToolChoiceOptionPlaceholderDiscriminator : IEquatable<InternalClientOnlyChatCompletionToolChoiceOptionPlaceholderDiscriminator>
    {
        private readonly string _value;

        public InternalClientOnlyChatCompletionToolChoiceOptionPlaceholderDiscriminator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PredefinedValue = "predefined";
        private const string NamedValue = "named";

        public static InternalClientOnlyChatCompletionToolChoiceOptionPlaceholderDiscriminator Predefined { get; } = new InternalClientOnlyChatCompletionToolChoiceOptionPlaceholderDiscriminator(PredefinedValue);
        public static InternalClientOnlyChatCompletionToolChoiceOptionPlaceholderDiscriminator Named { get; } = new InternalClientOnlyChatCompletionToolChoiceOptionPlaceholderDiscriminator(NamedValue);
        public static bool operator ==(InternalClientOnlyChatCompletionToolChoiceOptionPlaceholderDiscriminator left, InternalClientOnlyChatCompletionToolChoiceOptionPlaceholderDiscriminator right) => left.Equals(right);
        public static bool operator !=(InternalClientOnlyChatCompletionToolChoiceOptionPlaceholderDiscriminator left, InternalClientOnlyChatCompletionToolChoiceOptionPlaceholderDiscriminator right) => !left.Equals(right);
        public static implicit operator InternalClientOnlyChatCompletionToolChoiceOptionPlaceholderDiscriminator(string value) => new InternalClientOnlyChatCompletionToolChoiceOptionPlaceholderDiscriminator(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalClientOnlyChatCompletionToolChoiceOptionPlaceholderDiscriminator other && Equals(other);
        public bool Equals(InternalClientOnlyChatCompletionToolChoiceOptionPlaceholderDiscriminator other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        public override string ToString() => _value;
    }
}
