// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace OpenAI.Moderations
{
    internal partial class InternalCreateModerationResponseResultCategoryAppliedInputTypes
    {
        internal IDictionary<string, BinaryData> SerializedAdditionalRawData { get; set; }
        internal InternalCreateModerationResponseResultCategoryAppliedInputTypes(IEnumerable<string> hate, IEnumerable<string> hateThreatening, IEnumerable<string> harassment, IEnumerable<string> harassmentThreatening, IEnumerable<InternalCreateModerationResponseResultCategoryAppliedInputTypesSelfHarm1> selfHarm, IEnumerable<InternalCreateModerationResponseResultCategoryAppliedInputTypesSelfHarmIntent> selfHarmIntent, IEnumerable<InternalCreateModerationResponseResultCategoryAppliedInputTypesSelfHarmInstruction> selfHarmInstructions, IEnumerable<InternalCreateModerationResponseResultCategoryAppliedInputTypesSexual> sexual, IEnumerable<string> sexualMinors, IEnumerable<InternalCreateModerationResponseResultCategoryAppliedInputTypesViolence> violence, IEnumerable<InternalCreateModerationResponseResultCategoryAppliedInputTypesViolenceGraphic> violenceGraphic)
        {
            Argument.AssertNotNull(hate, nameof(hate));
            Argument.AssertNotNull(hateThreatening, nameof(hateThreatening));
            Argument.AssertNotNull(harassment, nameof(harassment));
            Argument.AssertNotNull(harassmentThreatening, nameof(harassmentThreatening));
            Argument.AssertNotNull(selfHarm, nameof(selfHarm));
            Argument.AssertNotNull(selfHarmIntent, nameof(selfHarmIntent));
            Argument.AssertNotNull(selfHarmInstructions, nameof(selfHarmInstructions));
            Argument.AssertNotNull(sexual, nameof(sexual));
            Argument.AssertNotNull(sexualMinors, nameof(sexualMinors));
            Argument.AssertNotNull(violence, nameof(violence));
            Argument.AssertNotNull(violenceGraphic, nameof(violenceGraphic));

            Hate = hate.ToList();
            HateThreatening = hateThreatening.ToList();
            Harassment = harassment.ToList();
            HarassmentThreatening = harassmentThreatening.ToList();
            Illicit = new ChangeTrackingList<string>();
            IllicitViolent = new ChangeTrackingList<string>();
            SelfHarm = selfHarm.ToList();
            SelfHarmIntent = selfHarmIntent.ToList();
            SelfHarmInstructions = selfHarmInstructions.ToList();
            Sexual = sexual.ToList();
            SexualMinors = sexualMinors.ToList();
            Violence = violence.ToList();
            ViolenceGraphic = violenceGraphic.ToList();
        }

        internal InternalCreateModerationResponseResultCategoryAppliedInputTypes(IReadOnlyList<string> hate, IReadOnlyList<string> hateThreatening, IReadOnlyList<string> harassment, IReadOnlyList<string> harassmentThreatening, IReadOnlyList<string> illicit, IReadOnlyList<string> illicitViolent, IReadOnlyList<InternalCreateModerationResponseResultCategoryAppliedInputTypesSelfHarm1> selfHarm, IReadOnlyList<InternalCreateModerationResponseResultCategoryAppliedInputTypesSelfHarmIntent> selfHarmIntent, IReadOnlyList<InternalCreateModerationResponseResultCategoryAppliedInputTypesSelfHarmInstruction> selfHarmInstructions, IReadOnlyList<InternalCreateModerationResponseResultCategoryAppliedInputTypesSexual> sexual, IReadOnlyList<string> sexualMinors, IReadOnlyList<InternalCreateModerationResponseResultCategoryAppliedInputTypesViolence> violence, IReadOnlyList<InternalCreateModerationResponseResultCategoryAppliedInputTypesViolenceGraphic> violenceGraphic, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Hate = hate;
            HateThreatening = hateThreatening;
            Harassment = harassment;
            HarassmentThreatening = harassmentThreatening;
            Illicit = illicit;
            IllicitViolent = illicitViolent;
            SelfHarm = selfHarm;
            SelfHarmIntent = selfHarmIntent;
            SelfHarmInstructions = selfHarmInstructions;
            Sexual = sexual;
            SexualMinors = sexualMinors;
            Violence = violence;
            ViolenceGraphic = violenceGraphic;
            SerializedAdditionalRawData = serializedAdditionalRawData;
        }

        internal InternalCreateModerationResponseResultCategoryAppliedInputTypes()
        {
        }

        public IReadOnlyList<string> Hate { get; }
        public IReadOnlyList<string> HateThreatening { get; }
        public IReadOnlyList<string> Harassment { get; }
        public IReadOnlyList<string> HarassmentThreatening { get; }
        public IReadOnlyList<string> Illicit { get; }
        public IReadOnlyList<string> IllicitViolent { get; }
        public IReadOnlyList<InternalCreateModerationResponseResultCategoryAppliedInputTypesSelfHarm1> SelfHarm { get; }
        public IReadOnlyList<InternalCreateModerationResponseResultCategoryAppliedInputTypesSelfHarmIntent> SelfHarmIntent { get; }
        public IReadOnlyList<InternalCreateModerationResponseResultCategoryAppliedInputTypesSelfHarmInstruction> SelfHarmInstructions { get; }
        public IReadOnlyList<InternalCreateModerationResponseResultCategoryAppliedInputTypesSexual> Sexual { get; }
        public IReadOnlyList<string> SexualMinors { get; }
        public IReadOnlyList<InternalCreateModerationResponseResultCategoryAppliedInputTypesViolence> Violence { get; }
        public IReadOnlyList<InternalCreateModerationResponseResultCategoryAppliedInputTypesViolenceGraphic> ViolenceGraphic { get; }
    }
}
