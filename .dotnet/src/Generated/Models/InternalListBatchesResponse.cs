// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace OpenAI.Batch
{
    /// <summary> The ListBatchesResponse. </summary>
    internal partial class InternalListBatchesResponse
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="InternalListBatchesResponse"/>. </summary>
        /// <param name="data"></param>
        /// <param name="hasMore"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        internal InternalListBatchesResponse(IEnumerable<InternalBatchJob> data, bool hasMore)
        {
            Argument.AssertNotNull(data, nameof(data));

            Data = data.ToList();
            HasMore = hasMore;
        }

        /// <summary> Initializes a new instance of <see cref="InternalListBatchesResponse"/>. </summary>
        /// <param name="data"></param>
        /// <param name="firstId"></param>
        /// <param name="lastId"></param>
        /// <param name="hasMore"></param>
        /// <param name="object"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InternalListBatchesResponse(IReadOnlyList<InternalBatchJob> data, string firstId, string lastId, bool hasMore, InternalListBatchesResponseObject @object, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Data = data;
            FirstId = firstId;
            LastId = lastId;
            HasMore = hasMore;
            Object = @object;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="InternalListBatchesResponse"/> for deserialization. </summary>
        internal InternalListBatchesResponse()
        {
        }

        /// <summary> Gets the data. </summary>
        public IReadOnlyList<InternalBatchJob> Data { get; }
        /// <summary> Gets the first id. </summary>
        public string FirstId { get; }
        /// <summary> Gets the last id. </summary>
        public string LastId { get; }
        /// <summary> Gets the has more. </summary>
        public bool HasMore { get; }
        /// <summary> Gets the object. </summary>
        public InternalListBatchesResponseObject Object { get; } = InternalListBatchesResponseObject.List;
    }
}
