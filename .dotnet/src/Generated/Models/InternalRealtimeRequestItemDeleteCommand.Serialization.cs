// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using OpenAI;

namespace OpenAI.RealtimeConversation
{
    internal partial class InternalRealtimeRequestItemDeleteCommand : IJsonModel<InternalRealtimeRequestItemDeleteCommand>
    {
        internal InternalRealtimeRequestItemDeleteCommand()
        {
        }

        void IJsonModel<InternalRealtimeRequestItemDeleteCommand>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalRealtimeRequestItemDeleteCommand>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InternalRealtimeRequestItemDeleteCommand)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            if (_additionalBinaryDataProperties?.ContainsKey("item_id") != true)
            {
                writer.WritePropertyName("item_id"u8);
                writer.WriteStringValue(ItemId);
            }
        }

        InternalRealtimeRequestItemDeleteCommand IJsonModel<InternalRealtimeRequestItemDeleteCommand>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (InternalRealtimeRequestItemDeleteCommand)JsonModelCreateCore(ref reader, options);

        protected override InternalRealtimeRequestCommand JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalRealtimeRequestItemDeleteCommand>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InternalRealtimeRequestItemDeleteCommand)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInternalRealtimeRequestItemDeleteCommand(document.RootElement, options);
        }

        internal static InternalRealtimeRequestItemDeleteCommand DeserializeInternalRealtimeRequestItemDeleteCommand(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string itemId = default;
            InternalRealtimeRequestCommandType kind = default;
            string eventId = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("item_id"u8))
                {
                    itemId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("type"u8))
                {
                    kind = new InternalRealtimeRequestCommandType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("event_id"u8))
                {
                    eventId = prop.Value.GetString();
                    continue;
                }
                if (true)
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new InternalRealtimeRequestItemDeleteCommand(itemId, kind, eventId, additionalBinaryDataProperties);
        }

        BinaryData IPersistableModel<InternalRealtimeRequestItemDeleteCommand>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalRealtimeRequestItemDeleteCommand>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(InternalRealtimeRequestItemDeleteCommand)} does not support writing '{options.Format}' format.");
            }
        }

        InternalRealtimeRequestItemDeleteCommand IPersistableModel<InternalRealtimeRequestItemDeleteCommand>.Create(BinaryData data, ModelReaderWriterOptions options) => (InternalRealtimeRequestItemDeleteCommand)PersistableModelCreateCore(data, options);

        protected override InternalRealtimeRequestCommand PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InternalRealtimeRequestItemDeleteCommand>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeInternalRealtimeRequestItemDeleteCommand(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(InternalRealtimeRequestItemDeleteCommand)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<InternalRealtimeRequestItemDeleteCommand>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        public static implicit operator BinaryContent(InternalRealtimeRequestItemDeleteCommand internalRealtimeRequestItemDeleteCommand)
        {
            if (internalRealtimeRequestItemDeleteCommand == null)
            {
                return null;
            }
            return BinaryContent.Create(internalRealtimeRequestItemDeleteCommand, ModelSerializationExtensions.WireOptions);
        }

        public static explicit operator InternalRealtimeRequestItemDeleteCommand(ClientResult result)
        {
            using PipelineResponse response = result.GetRawResponse();
            using JsonDocument document = JsonDocument.Parse(response.Content);
            return DeserializeInternalRealtimeRequestItemDeleteCommand(document.RootElement, ModelSerializationExtensions.WireOptions);
        }
    }
}
