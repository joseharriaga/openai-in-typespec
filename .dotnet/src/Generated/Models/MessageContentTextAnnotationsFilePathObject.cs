// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace OpenAI.Internal.Models
{
    /// <summary>
    /// A URL for the file that's generated when the assistant used the `code_interpreter` tool to
    /// generate a file.
    /// </summary>
    internal partial class MessageContentTextAnnotationsFilePathObject
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MessageContentTextAnnotationsFilePathObject"/>. </summary>
        /// <param name="text"> The text in the message content that needs to be replaced. </param>
        /// <param name="filePath"></param>
        /// <param name="startIndex"></param>
        /// <param name="endIndex"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> or <paramref name="filePath"/> is null. </exception>
        internal MessageContentTextAnnotationsFilePathObject(string text, MessageContentTextAnnotationsFilePathObjectFilePath filePath, long startIndex, long endIndex)
        {
            Argument.AssertNotNull(text, nameof(text));
            Argument.AssertNotNull(filePath, nameof(filePath));

            Text = text;
            FilePath = filePath;
            StartIndex = startIndex;
            EndIndex = endIndex;
        }

        /// <summary> Initializes a new instance of <see cref="MessageContentTextAnnotationsFilePathObject"/>. </summary>
        /// <param name="type"> Always `file_path`. </param>
        /// <param name="text"> The text in the message content that needs to be replaced. </param>
        /// <param name="filePath"></param>
        /// <param name="startIndex"></param>
        /// <param name="endIndex"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MessageContentTextAnnotationsFilePathObject(MessageContentTextAnnotationsFilePathObjectType type, string text, MessageContentTextAnnotationsFilePathObjectFilePath filePath, long startIndex, long endIndex, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Type = type;
            Text = text;
            FilePath = filePath;
            StartIndex = startIndex;
            EndIndex = endIndex;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="MessageContentTextAnnotationsFilePathObject"/> for deserialization. </summary>
        internal MessageContentTextAnnotationsFilePathObject()
        {
        }

        /// <summary> Always `file_path`. </summary>
        public MessageContentTextAnnotationsFilePathObjectType Type { get; } = MessageContentTextAnnotationsFilePathObjectType.FilePath;

        /// <summary> The text in the message content that needs to be replaced. </summary>
        public string Text { get; }
        /// <summary> Gets the file path. </summary>
        public MessageContentTextAnnotationsFilePathObjectFilePath FilePath { get; }
        /// <summary> Gets the start index. </summary>
        public long StartIndex { get; }
        /// <summary> Gets the end index. </summary>
        public long EndIndex { get; }
    }
}
