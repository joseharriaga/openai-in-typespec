// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace OpenAI.Assistants
{
    /// <summary> The CreateMessageRequest. </summary>
    public partial class MessageCreationOptions
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MessageCreationOptions"/>. </summary>
        /// <param name="role">
        /// The role of the entity that is creating the message. Allowed values include:
        /// - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
        /// - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.
        /// </param>
        /// <param name="content">
        /// Please note <see cref="MessageContentItem"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MessageImageFileContentItem"/>, <see cref="MessageImageUrlContentItem"/> and <see cref="MessageTextContentItem"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public MessageCreationOptions(MessageRole role, IEnumerable<MessageContentItem> content)
        {
            Argument.AssertNotNull(content, nameof(content));

            Role = role;
            Content = content.ToList();
            Attachments = new ChangeTrackingList<MessageCreationAttachment>();
            Metadata = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="MessageCreationOptions"/>. </summary>
        /// <param name="role">
        /// The role of the entity that is creating the message. Allowed values include:
        /// - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
        /// - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.
        /// </param>
        /// <param name="content">
        /// Please note <see cref="MessageContentItem"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MessageImageFileContentItem"/>, <see cref="MessageImageUrlContentItem"/> and <see cref="MessageTextContentItem"/>.
        /// </param>
        /// <param name="attachments"> A list of files attached to the message, and the tools they should be added to. </param>
        /// <param name="metadata"> Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MessageCreationOptions(MessageRole role, IList<MessageContentItem> content, IList<MessageCreationAttachment> attachments, IDictionary<string, string> metadata, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Role = role;
            Content = content;
            Attachments = attachments;
            Metadata = metadata;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="MessageCreationOptions"/> for deserialization. </summary>
        internal MessageCreationOptions()
        {
        }
        /// <summary>
        /// Gets the content
        /// Please note <see cref="MessageContentItem"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MessageImageFileContentItem"/>, <see cref="MessageImageUrlContentItem"/> and <see cref="MessageTextContentItem"/>.
        /// </summary>
        public IList<MessageContentItem> Content { get; }
        /// <summary> A list of files attached to the message, and the tools they should be added to. </summary>
        public IList<MessageCreationAttachment> Attachments { get; set; }
        /// <summary> Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </summary>
        public IDictionary<string, string> Metadata { get; set; }
    }
}
