// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace OpenAI.Internal.Models
{
    /// <summary>
    /// A URL for the file that's generated when the assistant used the `code_interpreter` tool to
    /// generate a file.
    /// </summary>
    internal partial class MessageDeltaContentTextAnnotationsFilePathObject
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MessageDeltaContentTextAnnotationsFilePathObject"/>. </summary>
        /// <param name="index"> The index of the annotation in a text content part. </param>
        internal MessageDeltaContentTextAnnotationsFilePathObject(long index)
        {
            Index = index;
        }

        /// <summary> Initializes a new instance of <see cref="MessageDeltaContentTextAnnotationsFilePathObject"/>. </summary>
        /// <param name="index"> The index of the annotation in a text content part. </param>
        /// <param name="type"> The type of the citation, which is always `file_path`. </param>
        /// <param name="filePath"> The file ID data for the message. </param>
        /// <param name="startIndex"> The start index of the citation. </param>
        /// <param name="endIndex"> The end index of the citation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MessageDeltaContentTextAnnotationsFilePathObject(long index, MessageDeltaContentTextAnnotationsFilePathObjectType type, MessageDeltaContentTextAnnotationsFilePathObjectFilePath filePath, long? startIndex, long? endIndex, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Index = index;
            Type = type;
            FilePath = filePath;
            StartIndex = startIndex;
            EndIndex = endIndex;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="MessageDeltaContentTextAnnotationsFilePathObject"/> for deserialization. </summary>
        internal MessageDeltaContentTextAnnotationsFilePathObject()
        {
        }

        /// <summary> The index of the annotation in a text content part. </summary>
        public long Index { get; }
        /// <summary> The type of the citation, which is always `file_path`. </summary>
        public MessageDeltaContentTextAnnotationsFilePathObjectType Type { get; } = MessageDeltaContentTextAnnotationsFilePathObjectType.FilePath;

        /// <summary> The file ID data for the message. </summary>
        public MessageDeltaContentTextAnnotationsFilePathObjectFilePath FilePath { get; }
        /// <summary> The start index of the citation. </summary>
        public long? StartIndex { get; }
        /// <summary> The end index of the citation. </summary>
        public long? EndIndex { get; }
    }
}
