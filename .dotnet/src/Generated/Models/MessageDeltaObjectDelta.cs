// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace OpenAI.Internal.Models
{
    /// <summary> The MessageDeltaObjectDelta. </summary>
    internal partial class MessageDeltaObjectDelta
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MessageDeltaObjectDelta"/>. </summary>
        /// <param name="content">
        /// The entity that produced the message.
        ///     role: "user" | "assistant";
        ///
        ///     /** The content of the message as an array of text and/or images.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        internal MessageDeltaObjectDelta(IEnumerable<BinaryData> content)
        {
            Argument.AssertNotNull(content, nameof(content));

            Content = content.ToList();
            FileIds = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="MessageDeltaObjectDelta"/>. </summary>
        /// <param name="content">
        /// The entity that produced the message.
        ///     role: "user" | "assistant";
        ///
        ///     /** The content of the message as an array of text and/or images.
        /// </param>
        /// <param name="fileIds"> A list of file IDs that the assistant can use. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MessageDeltaObjectDelta(IReadOnlyList<BinaryData> content, IReadOnlyList<string> fileIds, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Content = content;
            FileIds = fileIds;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="MessageDeltaObjectDelta"/> for deserialization. </summary>
        internal MessageDeltaObjectDelta()
        {
        }

        /// <summary>
        /// The entity that produced the message.
        ///     role: "user" | "assistant";
        ///
        ///     /** The content of the message as an array of text and/or images.
        /// <para>
        /// To assign an object to the element of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyList<BinaryData> Content { get; }
        /// <summary> A list of file IDs that the assistant can use. </summary>
        public IReadOnlyList<string> FileIds { get; }
    }
}
