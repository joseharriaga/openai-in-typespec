// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace OpenAI.Internal.Models
{
    /// <summary> The RunStepDetailsToolCallsCodeObjectCodeInterpreter. </summary>
    internal partial class RunStepDetailsToolCallsCodeObjectCodeInterpreter
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="RunStepDetailsToolCallsCodeObjectCodeInterpreter"/>. </summary>
        /// <param name="input"> The input to the Code Interpreter tool call. </param>
        /// <param name="outputs">
        /// The outputs from the Code Interpreter tool call. Code Interpreter can output one or more
        /// items, including text (`logs`) or images (`image`). Each of these are represented by a
        /// different object type.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> or <paramref name="outputs"/> is null. </exception>
        internal RunStepDetailsToolCallsCodeObjectCodeInterpreter(string input, IEnumerable<BinaryData> outputs)
        {
            Argument.AssertNotNull(input, nameof(input));
            Argument.AssertNotNull(outputs, nameof(outputs));

            Input = input;
            Outputs = outputs.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="RunStepDetailsToolCallsCodeObjectCodeInterpreter"/>. </summary>
        /// <param name="input"> The input to the Code Interpreter tool call. </param>
        /// <param name="outputs">
        /// The outputs from the Code Interpreter tool call. Code Interpreter can output one or more
        /// items, including text (`logs`) or images (`image`). Each of these are represented by a
        /// different object type.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal RunStepDetailsToolCallsCodeObjectCodeInterpreter(string input, IReadOnlyList<BinaryData> outputs, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Input = input;
            Outputs = outputs;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="RunStepDetailsToolCallsCodeObjectCodeInterpreter"/> for deserialization. </summary>
        internal RunStepDetailsToolCallsCodeObjectCodeInterpreter()
        {
        }

        /// <summary> The input to the Code Interpreter tool call. </summary>
        public string Input { get; }
        /// <summary>
        /// The outputs from the Code Interpreter tool call. Code Interpreter can output one or more
        /// items, including text (`logs`) or images (`image`). Each of these are represented by a
        /// different object type.
        /// <para>
        /// To assign an object to the element of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyList<BinaryData> Outputs { get; }
    }
}
