// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace OpenAI.Assistants
{
    /// <summary> Enum for type in RunStep. </summary>
    public readonly partial struct RunStepKind : IEquatable<RunStepKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RunStepKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RunStepKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MessageCreationValue = "message_creation";
        private const string ToolCallsValue = "tool_calls";

        /// <summary> message_creation. </summary>
        public static RunStepKind MessageCreation { get; } = new RunStepKind(MessageCreationValue);
        /// <summary> tool_calls. </summary>
        public static RunStepKind ToolCalls { get; } = new RunStepKind(ToolCallsValue);
        /// <summary> Determines if two <see cref="RunStepKind"/> values are the same. </summary>
        public static bool operator ==(RunStepKind left, RunStepKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RunStepKind"/> values are not the same. </summary>
        public static bool operator !=(RunStepKind left, RunStepKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RunStepKind"/>. </summary>
        public static implicit operator RunStepKind(string value) => new RunStepKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RunStepKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RunStepKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
