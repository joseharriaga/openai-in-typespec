// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace OpenAI.Internal.Models
{
    /// <summary> Enum for status in ThreadMessage. </summary>
    internal readonly partial struct ThreadMessageStatus : IEquatable<ThreadMessageStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ThreadMessageStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ThreadMessageStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InProgressValue = "in_progress";
        private const string IncompleteValue = "incomplete";
        private const string CompletedValue = "completed";

        /// <summary> in_progress. </summary>
        public static ThreadMessageStatus InProgress { get; } = new ThreadMessageStatus(InProgressValue);
        /// <summary> incomplete. </summary>
        public static ThreadMessageStatus Incomplete { get; } = new ThreadMessageStatus(IncompleteValue);
        /// <summary> completed. </summary>
        public static ThreadMessageStatus Completed { get; } = new ThreadMessageStatus(CompletedValue);
        /// <summary> Determines if two <see cref="ThreadMessageStatus"/> values are the same. </summary>
        public static bool operator ==(ThreadMessageStatus left, ThreadMessageStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ThreadMessageStatus"/> values are not the same. </summary>
        public static bool operator !=(ThreadMessageStatus left, ThreadMessageStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ThreadMessageStatus"/>. </summary>
        public static implicit operator ThreadMessageStatus(string value) => new ThreadMessageStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ThreadMessageStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ThreadMessageStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
