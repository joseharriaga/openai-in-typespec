// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using OpenAI.Models;

namespace OpenAI.VectorStores
{
    /// <summary> A list of files attached to a vector store. </summary>
    public partial class VectorStoreFileAssociation
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VectorStoreFileAssociation"/>. </summary>
        /// <param name="fileId"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="size"> The total vector store usage in bytes. Note that this may be different from the original file size. </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the vector store file was created. </param>
        /// <param name="vectorStoreId"> The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to. </param>
        /// <param name="status"> The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use. </param>
        /// <param name="lastError"> The last error associated with this vector store file. Will be `null` if there are no errors. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fileId"/> or <paramref name="vectorStoreId"/> is null. </exception>
        internal VectorStoreFileAssociation(string fileId, int size, DateTimeOffset createdAt, string vectorStoreId, VectorStoreFileAssociationStatus status, VectorStoreFileAssociationError? lastError)
        {
            Argument.AssertNotNull(fileId, nameof(fileId));
            Argument.AssertNotNull(vectorStoreId, nameof(vectorStoreId));

            FileId = fileId;
            Size = size;
            CreatedAt = createdAt;
            VectorStoreId = vectorStoreId;
            Status = status;
            LastError = lastError;
        }

        /// <summary> Initializes a new instance of <see cref="VectorStoreFileAssociation"/>. </summary>
        /// <param name="fileId"> The identifier, which can be referenced in API endpoints. </param>
        /// <param name="object"> The object type, which is always `vector_store.file`. </param>
        /// <param name="size"> The total vector store usage in bytes. Note that this may be different from the original file size. </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the vector store file was created. </param>
        /// <param name="vectorStoreId"> The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to. </param>
        /// <param name="status"> The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use. </param>
        /// <param name="lastError"> The last error associated with this vector store file. Will be `null` if there are no errors. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VectorStoreFileAssociation(string fileId, object @object, int size, DateTimeOffset createdAt, string vectorStoreId, VectorStoreFileAssociationStatus status, VectorStoreFileAssociationError? lastError, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            FileId = fileId;
            Object = @object;
            Size = size;
            CreatedAt = createdAt;
            VectorStoreId = vectorStoreId;
            Status = status;
            LastError = lastError;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="VectorStoreFileAssociation"/> for deserialization. </summary>
        internal VectorStoreFileAssociation()
        {
        }
        /// <summary> The Unix timestamp (in seconds) for when the vector store file was created. </summary>
        public DateTimeOffset CreatedAt { get; }
        /// <summary> The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to. </summary>
        public string VectorStoreId { get; }
        /// <summary> The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use. </summary>
        public VectorStoreFileAssociationStatus Status { get; }
        /// <summary> The last error associated with this vector store file. Will be `null` if there are no errors. </summary>
        public VectorStoreFileAssociationError? LastError { get; }
    }
}
